name: Build, test, and deploy

on:
  push:
    branches: [ main ]

jobs:
# ────────────────────────────────
# 1) TEST JOB
# ────────────────────────────────
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"   # or the version you need

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          pytest -q tests         # adjust if your tests live elsewhere

# ────────────────────────────────
# 2) BUILD + PUSH (runs only if test succeeded)
# ────────────────────────────────
  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & push image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-image:latest

# ────────────────────────────────
# 3) DEPLOY (runs only if image built & pushed)
# ────────────────────────────────
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for docker-compose.yml)
        uses: actions/checkout@v2

      - name: Set up SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_deploy_key
          known_hosts: unnecessary

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Transfer docker-compose.yml
        run: |
          rsync -avz -e "ssh -i ~/.ssh/id_deploy_key -o StrictHostKeyChecking=no -p 22" \
            ./docker-compose.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.HOST }}:/home/${{ secrets.SSH_USERNAME }}/my-app/

      - name: Run docker compose on remote
        run: |
          ssh -i ~/.ssh/id_deploy_key -o StrictHostKeyChecking=no -p 22 \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.HOST }} \
            "cd /home/${{ secrets.SSH_USERNAME }}/my-app && docker compose up -d"
# ────────────────────────────────
# 4) VERIFY (runs after deploy)
# ────────────────────────────────
  verify:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          name: id_deploy_key
          known_hosts: unnecessary

      - name: Add known hosts
        run: ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Verify container status
        run: |
          ssh -i ~/.ssh/id_deploy_key -o StrictHostKeyChecking=no -p 22 ${{ secrets.SSH_USERNAME }}@${{ secrets.HOST }} << 'EOF'
            echo "Checking running containers..."
            if ! docker ps | grep my-image; then
              echo "Container not running!"
              exit 1
            fi
      
            echo "Curling localhost:8080..."
            if ! curl -s -f http://localhost:8080; then
              echo "App not responding!"
              exit 1
            fi
      
            echo "App is up and healthy!"
          EOF

